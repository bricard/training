{"ts":1390629717727,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var redis = require('redis');\nvar nohm = require(__dirname+'/../lib/nohm').Nohm;\nvar child_process = require('child_process');\n\nrequire(__dirname+'/pubsub/Model.js');\n\nvar child_path = __dirname+'/pubsub/child.js';\n\nvar after = function (times, fn) {\n  return function () {\n    if ((--times) <= 0) {\n      fn.apply(this, arguments);\n    }\n  };\n};\n\nvar error_callback = function (t) {\n  return function (err) {\n    t.ok(!err, 'Callback received an error');\n  };\n};\n\nvar secondaryClient = redis.createClient();\n\nmodule.exports = {\n  \n  'after helper function': function(t) {\n\n    var counter = 0;\n  \n    var _test = after(3, function () {\n      counter += 1;\n    });\n  \n    _test();_test();_test();\n  \n    t.equal(counter, 1, 'Function has been called a wrong number of times');\n    t.done();\n  \n  },\n  \n  'set/get pubSub client': function (t) {\n    t.expect(3);\n    nohm.setPubSubClient(secondaryClient, function (err) {\n      t.ok(!err, 'There was an error while subscribing');\n      t.same(nohm.getPubSubClient(), secondaryClient, 'Second redis client wasn\\'t set properly');\n      t.ok(nohm.getPubSubClient().subscription_set, 'Second redis client isn\\'t subscribed to anything');\n      t.done();\n    });\n  },\n  \n  'unsubscribe': function (t) {\n    t.expect(1);\n    nohm.closePubSub(function (err, client) {\n      t.same(client, secondaryClient, 'closePubSub returned a wrong redis client');\n      client.end();\n      t.done();\n    });\n  },\n  \n  'set/get publish bool': function (t) {\n    t.expect(4);\n    \n    var no_publish = nohm.factory('no_publish');\n    t.same(no_publish.getPublish(), false, 'model without publish returned true');\n    \n    var publish = nohm.factory('Tester');\n    t.same(publish.getPublish(), true, 'model with publish returned false');\n    \n    nohm.setPublish(true);\n    t.same(no_publish.getPublish(), true, 'model without publish but global publish returned false');\n    \n    nohm.setPublish(false);\n    t.same(publish.getPublish(), true, 'model with publish and global publish false returned false');\n    \n    t.done();\n  },\n    \n  'nohm in child process doesn\\'t have pubsub yet': function (t) {\n    t.expect(1);\n    var question = 'does nohm have pubsub?';\n    var child = child_process.fork(child_path);\n    var checkNohmPubSubNotInitialized = function (msg) {\n      if (msg.question === question) {\n        t.same(msg.answer, false, 'PubSub in the child process was already initialized.');\n        child.kill();\n        t.done();\n      }\n    };\n    child.on('message', checkNohmPubSubNotInitialized);\n    child.send({question: question});\n  },\n  \n  'initialized': {\n    setUp: function (next) {\n      var child = this.child = child_process.fork(child_path, process.argv);\n      child.on('message', function (msg) {\n        if (msg.question === 'initialize' && msg.answer === true) {\n          next();\n        }\n        if (msg.error) {\n          throw new Error(msg.error);\n        }\n      });\n      \n      child.ask = function (request, callback) {\n        child.send(request);\n        child.on('message', function (msg) {\n          if (msg.question === request.question) {\n            callback(msg);\n          }\n        });\n      };\n      child.send({question: 'initialize'});\n    },\n    \n    tearDown: function (next) {\n      this.child.kill();\n      nohm.closePubSub(function (err, client) {\n        client.end();\n        next();\n      });\n    },\n    \n    'create': function (t) {\n      t.expect(5);\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'create');\n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'create',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var target = msg.answer.target;\n        t.ok(instance.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance.id, target.id, 'Id from create event wrong');\n        t.same(instance.modelName, target.modelName, 'Modelname from create event wrong');\n        t.same(instance.allProperties(), target.properties, 'Properties from create event wrong');\n        t.done();\n      });\n      \n      instance.save(error_callback(t));\n    },\n    \n    'update': function (t) {\n      t.expect(7);\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'update');\n      var diff;\n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'update',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        t.ok(instance.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance.id, answer.target.id, 'Id from update event wrong');\n        t.same(instance.modelName, answer.target.modelName, 'Modelname from update event wrong');\n        t.same(instance.allProperties(), answer.target.properties, 'Properties from update event wrong');\n        t.same(diff, answer.target.diff, 'Properties from update event wrong');\n        t.done();\n      });\n      \n      instance.save(function (err) {\n        error_callback(t)(err);\n        instance.p('dummy', 'updatededed');\n        diff = instance.propertyDiff();\n        instance.save(error_callback(t));\n      });\n    },\n    \n    'save': function (t) {\n      t.expect(10);\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'save');\n      \n      \n      var counter = 0;      \n      var props = [];\n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'save',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        t.ok(instance.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance.id, answer.target.id, 'Id from save event wrong');\n        t.same(instance.modelName, answer.target.modelName, 'Modelname from save event wrong');\n        t.same(props[counter], answer.target.properties, 'Properties from save event wrong');\n        counter++;\n        if (counter >= 2) {\n          t.done();\n        }\n      });\n      \n      instance.save(function (err) {\n        error_callback(t)(err);\n        props.push(instance.allProperties());\n        instance.p('dummy', 'save_the_second');\n        props.push(instance.allProperties());\n        instance.save(error_callback(t));\n      });\n    },\n    \n    'remove': function (t) {\n      t.expect(6);\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'remove');\n      var old_id;\n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'remove',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        t.same(instance.id, 0, 'ID was not reset properly before the child returned the event.');\n        t.same(old_id, answer.target.id, 'Id from remove event wrong');\n        t.same(instance.modelName, answer.target.modelName, 'Modelname from remove event wrong');\n        t.same(instance.allProperties(), answer.target.properties, 'Properties from remove event wrong');\n        t.done();\n      });\n      \n      instance.save(function (err) {\n        error_callback(t)(err);\n        old_id = instance.id;\n        instance.remove(error_callback(t));\n      });\n    },\n    \n    'link': function (t) {\n      t.expect(9);\n      var instance_child = nohm.factory('Tester');\n      var instance_parent = nohm.factory('Tester');\n      instance_child.p('dummy', 'link_child');\n      instance_parent.p('dummy', 'link_parent');\n      instance_child.link(instance_parent);      \n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'link',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        t.ok(instance_child.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance_child.id, answer.child.id, 'Id from link event wrong');\n        t.same(instance_child.modelName, answer.child.modelName, 'Modelname from link event wrong');\n        t.same(instance_child.allProperties(), answer.child.properties, 'Properties from link event wrong');\n        \n        t.ok(instance_parent.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance_parent.id, answer.parent.id, 'Id from link event wrong');\n        t.same(instance_parent.modelName, answer.parent.modelName, 'Modelname from link event wrong');\n        t.same(instance_parent.allProperties(), answer.parent.properties, 'Properties from link event wrong');\n        t.done();\n      });\n      \n      instance_child.save(error_callback(t));\n    },\n    \n    'unlink': function (t) {\n      t.expect(10);\n      var instance_child = nohm.factory('Tester');\n      var instance_parent = nohm.factory('Tester');\n      instance_child.p('dummy', 'unlink_child');\n      instance_parent.p('dummy', 'unlink_parent');\n      instance_child.link(instance_parent);\n      \n      this.child.ask({\n        question: 'subscribe',\n        args: {\n          event: 'unlink',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        t.ok(instance_child.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance_child.id, answer.child.id, 'Id from unlink event wrong');\n        t.same(instance_child.modelName, answer.child.modelName, 'Modelname from unlink event wrong');\n        t.same(instance_child.allProperties(), answer.child.properties, 'Properties from unlink event wrong');\n        \n        t.ok(instance_parent.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance_parent.id, answer.parent.id, 'Id from unlink event wrong');\n        t.same(instance_parent.modelName, answer.parent.modelName, 'Modelname from unlink event wrong');\n        t.same(instance_parent.allProperties(), answer.parent.properties, 'Properties from unlink event wrong');\n        t.done();\n      });\n      \n      instance_child.save(function (err) {\n        error_callback(t)(err);\n        instance_child.unlink(instance_parent);\n        instance_child.save(error_callback(t));\n      });\n    },\n    \n    'createOnce': function (t) {\n      // because testing a once event is a pain in the ass and really doesn't have many ways it can fail if the on method on the same event works, we only do on once test.\n      t.expect(7);\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'create_once');\n      var once_done = 0;\n      \n      this.child.ask({\n        question: 'subscribeOnce',\n        args: {\n          event: 'create',\n          modelName: 'Tester'\n        }\n      }, function (msg) {\n        var answer = msg.answer;\n        once_done++;\n        t.ok(instance.id.length > 0, 'ID was not set properly before the child returned the event.');\n        t.same(instance.id, answer.target.id, 'Id from createOnce event wrong');\n        t.same(instance.modelName, answer.target.modelName, 'Modelname from createOnce event wrong');\n        t.same(instance.allProperties(), answer.target.properties, 'Properties from createOnce event wrong');\n        \n        var instance_inner = nohm.factory('Tester');\n        instance_inner.p('dummy', 'create_once_again');\n        instance_inner.save(error_callback(t));\n        \n        setTimeout(function () {\n          t.same(once_done, 1, 'subscribeOnce called the callback more than once.');\n          t.done();\n        }, 150); // this is fucked up :(\n      });\n      \n      instance.save(error_callback(t));\n    },\n    \n    'silenced': function (t) {\n      t.expect(6);\n      var self = this;\n      var instance = nohm.factory('Tester');\n      instance.p('dummy', 'silenced');\n      var answered = false;\n      \n      var events = ['create', 'update', 'save', 'remove', 'link', 'unlink'];\n      \n      events.forEach(function (event) {\n        self.child.ask({\n          question: 'subscribe',\n          args: {\n            event: event,\n            modelName: 'Tester'\n          }\n        }, function (msg) {\n          if (msg.event === event) {\n            console.log(msg);\n            answered = true;\n          }\n        });\n      });\n      \n      instance.save({silent: true}, function (err) {\n        t.ok(!err, 'There was an error while saving silenced.');\n        instance.p('dummy', 'updated');\n        instance.save({silent: true}, function (err) {\n          t.ok(!err, 'There was an error while updating silenced.');\n          var second = nohm.factory('Tester');\n          instance.link(second);\n          instance.save({silent: true}, function (err) {\n            t.ok(!err, 'There was an error while linking silenced.');\n            instance.unlink(second);\n            instance.save({silent: true}, function (err) {\n              t.ok(!err, 'There was an error while unlinking silenced.');\n              instance.remove({silent: true}, function (err) {\n                t.ok(!err, 'There was an error while removing silenced.');\n                setTimeout(function () {\n                  t.same(answered, false, 'There was an event!');\n                  t.done();\n                }, 150);\n              });\n            });\n          });\n        });\n      });\n    }\n  }\n};"]],"start1":0,"start2":0,"length1":0,"length2":13298}]],"length":13298}
{"contributors":[],"silentsave":false,"ts":1390630171791,"patch":[[{"diffs":[[0,"rror');\n  };"],[1,"a"],[0,"\n"],[-1,""],[0,"};\n\nvar seco"]],"start1":448,"start2":448,"length1":25,"length2":26},{"diffs":[[0,"rts = {\n"],[-1,"  "],[0,"\n"],[1,""],[0,"  'after"]],"start1":522,"start2":522,"length1":19,"length2":17},{"diffs":[[0,"er = 0;\n"],[-1,"  "],[0,"\n"],[1,""],[0,"    var "]],"start1":586,"start2":586,"length1":19,"length2":17},{"diffs":[[0,"    });\n"],[-1,"  "],[0,"\n"],[1,""],[0,"    _tes"]],"start1":654,"start2":654,"length1":19,"length2":17},{"diffs":[[0,"test();\n"],[-1,"  "],[0,"\n"],[1,""],[0,"    t.eq"]],"start1":684,"start2":684,"length1":19,"length2":17},{"diffs":[[0,"();\n"],[-1,"  "],[0,"\n"],[1,""],[0,"  },\n"],[-1,"  "],[0,"\n"],[1,""],[0,"  's"]],"start1":780,"start2":780,"length1":19,"length2":15},{"diffs":[[0,");\n  },\n"],[-1,"  "],[0,"\n"],[1,""],[0,"  'unsub"]],"start1":1193,"start2":1193,"length1":19,"length2":17},{"diffs":[[0,");\n  },\n"],[-1,"  "],[0,"\n"],[1,""],[0,"  'set/g"]],"start1":1422,"start2":1422,"length1":19,"length2":17},{"diffs":[[0,"ect(4);\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    var "]],"start1":1481,"start2":1481,"length1":21,"length2":17},{"diffs":[[0,"ned true');\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    var publ"]],"start1":1610,"start2":1610,"length1":29,"length2":25},{"diffs":[[0,"turned false');\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    nohm.setPubl"]],"start1":1726,"start2":1726,"length1":37,"length2":33},{"diffs":[[0,"ed false');\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    nohm.set"]],"start1":1860,"start2":1860,"length1":29,"length2":25},{"diffs":[[0,"alse');\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    t.do"]],"start1":1995,"start2":1995,"length1":21,"length2":17},{"diffs":[[0,");\n  },\n"],[-1,"    "],[0,"\n"],[1,""],[0,"  'nohm "]],"start1":2015,"start2":2015,"length1":21,"length2":17},{"diffs":[[0,");\n  },\n"],[-1,"  "],[0,"\n"],[1,""],[0,"  'initi"]],"start1":2534,"start2":2534,"length1":19,"length2":17},{"diffs":[[0,"}\n      });\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      child."]],"start1":2878,"start2":2878,"length1":31,"length2":25},{"diffs":[[0,"'});\n    },\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    tearDown"]],"start1":3164,"start2":3164,"length1":29,"length2":25},{"diffs":[[0,"     });\n    },\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    'create': fu"]],"start1":3321,"start2":3321,"length1":37,"length2":33},{"diffs":[[0," 'create');\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      this.c"]],"start1":3456,"start2":3456,"length1":31,"length2":25},{"diffs":[[0,"ne();\n      });\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      instance.s"]],"start1":4046,"start2":4046,"length1":39,"length2":33},{"diffs":[[0,"t));\n    },\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    'update'"]],"start1":4098,"start2":4098,"length1":29,"length2":25},{"diffs":[[0,"r diff;\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      th"]],"start1":4249,"start2":4249,"length1":23,"length2":17},{"diffs":[[0,"ne();\n      });\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      instance.s"]],"start1":4929,"start2":4929,"length1":39,"length2":33},{"diffs":[[0," });\n    },\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    'save': "]],"start1":5146,"start2":5146,"length1":29,"length2":25},{"diffs":[[0,"save');\n"],[-1,"      \n      "],[1,"\n"],[0,"\n      v"]],"start1":5278,"start2":5278,"length1":29,"length2":17},{"diffs":[[0,"ter = 0;"],[-1,"      "],[0,"\n      v"]],"start1":5302,"start2":5302,"length1":22,"length2":16},{"diffs":[[0,"s = [];\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      th"]],"start1":5325,"start2":5325,"length1":23,"length2":17},{"diffs":[[0,"    }\n      });\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      instance.s"]],"start1":5966,"start2":5966,"length1":39,"length2":33},{"diffs":[[0," });\n    },\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    'remove'"]],"start1":6239,"start2":6239,"length1":29,"length2":25},{"diffs":[[0,"old_id;\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      th"]],"start1":6392,"start2":6392,"length1":23,"length2":17},{"diffs":[[0,"ne();\n      });\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      instance.s"]],"start1":6983,"start2":6983,"length1":39,"length2":33},{"diffs":[[0," });\n    },\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    'link': "]],"start1":7148,"start2":7148,"length1":29,"length2":25},{"diffs":[[0,"parent);"],[-1,"      \n      "],[1,"\n"],[0,"\n      t"]],"start1":7441,"start2":7441,"length1":29,"length2":17},{"diffs":[[0,"nt wrong');\n"],[-1,"        "],[0,"\n"],[1,""],[0,"        t.ok"]],"start1":8031,"start2":8031,"length1":33,"length2":25},{"diffs":[[0,"ne();\n      });\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      instance_c"]],"start1":8461,"start2":8461,"length1":39,"length2":33},{"diffs":[[0,"t));\n    },\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    'unlink'"]],"start1":8519,"start2":8519,"length1":29,"length2":25},{"diffs":[[0,"arent);\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      th"]],"start1":8820,"start2":8820,"length1":23,"length2":17},{"diffs":[[0,"nt wrong');\n"],[-1,"        "],[0,"\n"],[1,""],[0,"        t.ok"]],"start1":9417,"start2":9417,"length1":33,"length2":25},{"diffs":[[0,"ne();\n      });\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      instance_c"]],"start1":9853,"start2":9853,"length1":39,"length2":33},{"diffs":[[0," });\n    },\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    'createO"]],"start1":10046,"start2":10046,"length1":29,"length2":25},{"diffs":[[0,"ne = 0;\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      th"]],"start1":10387,"start2":10387,"length1":23,"length2":17},{"diffs":[[0,"rong');\n"],[-1,"        "],[0,"\n"],[1,""],[0,"        "]],"start1":11004,"start2":11004,"length1":25,"length2":17},{"diffs":[[0,"));\n"],[-1,"        "],[0,"\n"],[1,""],[0,"    "]],"start1":11166,"start2":11166,"length1":17,"length2":9},{"diffs":[[0,"up :(\n      });\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      instance.s"]],"start1":11344,"start2":11344,"length1":39,"length2":33},{"diffs":[[0,"\n    },\n"],[-1,"    "],[0,"\n"],[1,""],[0,"    'sil"]],"start1":11400,"start2":11400,"length1":21,"length2":17},{"diffs":[[0," false;\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      va"]],"start1":11586,"start2":11586,"length1":23,"length2":17},{"diffs":[[0,"link'];\n"],[-1,"      "],[0,"\n"],[1,""],[0,"      ev"]],"start1":11664,"start2":11664,"length1":23,"length2":17},{"diffs":[[0,"    });\n"],[-1,"      "],[0,"\n      i"]],"start1":12009,"start2":12009,"length1":22,"length2":16}]],"length":13057,"saved":false}
{"ts":1390630172760,"patch":[[{"diffs":[[0,"');\n  };"],[-1,"a"],[0,"\n};\n\nvar"]],"start1":452,"start2":452,"length1":17,"length2":16}]],"length":13056,"saved":false}
{"ts":1390630886018,"patch":[[{"diffs":[[0,"delName: 'Tester"],[1,"Create"],[0,"'\n        }\n    "]],"start1":3577,"start2":3577,"length1":32,"length2":38},{"diffs":[[0,"delName: 'Tester"],[1,"Update"],[0,"'\n        }\n    "]],"start1":4372,"start2":4372,"length1":32,"length2":38},{"diffs":[[0,"delName: 'Tester"],[1,"Save"],[0,"'\n        }\n    "]],"start1":5452,"start2":5452,"length1":32,"length2":36}]],"length":13072,"saved":false}
{"ts":1390630941437,"patch":[[{"diffs":[[0,".factory('Tester"],[1,"Create"],[0,"');\n      instan"]],"start1":3410,"start2":3410,"length1":32,"length2":38},{"diffs":[[0,".factory('Tester"],[1,"Update"],[0,"');\n      instan"]],"start1":4195,"start2":4195,"length1":32,"length2":38},{"diffs":[[0,".factory('Tester"],[1,"Save"],[0,"');\n      instan"]],"start1":5254,"start2":5254,"length1":32,"length2":36}]],"length":13088,"saved":false}
