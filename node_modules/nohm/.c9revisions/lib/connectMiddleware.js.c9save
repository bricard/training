{"ts":1390631680775,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var Nohm = null;\nexports.setNohm = function (originalNohm) {\n  Nohm = originalNohm;\n  Nohm.connect = connect;\n};\n\n/**\n * This is black magic for now. Stay away from it if you can for now!\n */\n\nvar fs = require('fs');\n\nvar maxDepth = 5;\nvar customToString = function (obj, depth) {\n  depth = depth || 0;\n  if (depth > maxDepth) {\n    console.log('maxdepth exceeded');\n    console.dir(obj);\n    return '';\n  }\n  switch(typeof(obj)) {\n    case 'string':\n      return '\"'+obj+'\"';\n    case 'number':\n      return obj;\n    case 'boolean':\n      return obj ? 'true' : 'false';\n    case 'function':\n      if (obj instanceof RegExp) {\n        return obj.toString();\n      }\n      break;\n    case 'object':\n      if (Array.isArray(obj)) {\n        var arr = [];\n        obj.forEach(function (val) {\n          arr.push(customToString(val, depth+1));\n        });\n        return '['+arr.join(',')+']';\n      } else if (obj instanceof RegExp) {\n        return obj.toString();\n      } else {\n        var arr = [];\n        Object.keys(obj).forEach(function (val) {\n          arr.push('\"'+val+'\":'+customToString(obj[val], depth+1));\n        });\n        return '{'+arr.join(',')+'}';\n      }\n  }\n};\n\nvar validationsFlatten = function (model, exclusions) {\n  model = new model();\n  var props = model.properties;\n  var str = model.modelName+': {';\n  \n  /*\n *          User: { // modelName\n *            name: [0], // this will ignore the first validation in the validation definition array for name in the model definition\n *            salt: true // this will completely ignore all validations for the salt property\n *          },*/\n  \n  exclusions = exclusions || {};\n  var exclusionsStrings = [];\n  var exclusionsObject = {};\n  Object.keys(exclusions).forEach(function (key) {\n    var value = exclusions[key];\n    if (Array.isArray(value)) {\n      exclusionsObject[key] = value; // value should be like [true, false, true]\n    }\n    exclusionsStrings.push(key);\n  });\n  \n  Object.keys(props).forEach(function (key) {\n    var isExcepted = exclusionsStrings.indexOf(key) !== -1 && ! exclusionsObject.hasOwnProperty(key);\n    if ( ! isExcepted) {\n      var vals = props[key].validations;\n      if (Array.isArray(vals) && vals.length > 0) {\n        str += \"\"+key+': [';\n        var strVals = [];\n        vals.forEach(function (val, index) {\n          if ( ! exclusionsObject[key] || exclusionsObject[key][index]) {\n            strVals.push(customToString(val));\n          }\n        });\n        str += strVals.join(',')+'],           ';\n      }\n    }\n  });\n  return str+'}';\n};\n\nvar extraFilesIndex = 0;\n\nvar wrapFile = function (fileStr, namespace) {\n  var str = namespace+'.extraValidations['+extraFilesIndex+'] = {};(function (exports) {';\n  str += fileStr;\n  str += '})('+namespace+'.extraValidations['+extraFilesIndex+']);';\n  extraFilesIndex++;\n  return str;\n};\n\nvar wrapExtraFiles = function (files, namespace) {\n  var str = '';\n  files.forEach(function (path) {\n    var fileStr = fs.readFileSync(path, 'utf-8');\n    str += wrapFile(fileStr, namespace);\n  });\n  return str;\n};\n\n/**\n * Returns a middleware that can deliver the validations as a javascript file\n * and the modelspecific validations as a JSON object to the browser.\n * This is useful if you want to save some bandwith by doing the validations\n * in the browser before saving to the server.\n *\n * Options:\n *    - `url`         - Url under which the js file will be available. Default: '/nohmValidations.js'\n *    - `exclusions`  - Object containing exclusions for the validations export - see example for details\n *    - `namespace`   - Namespace to be used by the js file in the browser. Default: 'nohmValidations'\n *    - `extraFiles`  - Extra files containing validations. You should only use this if they are not already set via Nohm.setExtraValidations as this automatically includes those.\n *    - `maxAge`      - Cache control (in seconds)\n *    - `uglify`      - Boolean. True to enable minification. Requires uglify-js (not in dependencies of nohm!). Default: false // TODO\n * \n * Example:\n * \n *    server.use(nohm.connect(\n *      // options object\n *      {\n *        url: '/nohm.js',\n *        namespace: 'nohm',\n *        exclusions: {\n *          User: { // modelName\n *            name: [0], // this will ignore the first validation in the validation definition array for name in the model definition\n *            salt: true // this will completely ignore all validations for the salt property\n *          },\n *          Privileges: true // this will completely ignore the Priviledges model\n *        }\n *      }\n *    ));\n *\n * @param {Object} options Options for the middleware\n * @return {Function}\n * @static\n */\n \nfunction connect(options){\n  options = options || {};\n  var url = options.url || '/nohmValidations.js';\n  var namespace = options.namespace || 'nohmValidations';\n  var maxAge = options.maxAge || 3600; // 1 hour\n  var exclusions = options.exclusions || {};\n  var extraFiles = options.extraFiles || [];\n  var uglify = options.uglify || false;\n  if ( ! Array.isArray(extraFiles)) {\n    extraFiles = [extraFiles];\n  }\n  \n  // collect models\n  var arr = [];\n  var models = Nohm.getModels();\n  Object.keys(models).forEach(function (name) {\n    var model = models[name];\n    if (exclusions.hasOwnProperty(name) && exclusions[name] === true ) {\n      return; // exception set, but no fields\n    }\n    arr.push(validationsFlatten(model, exclusions[name]));\n  });\n  \n  var str = 'var nohmValidationsNamespaceName = \"'+namespace+'\";var '+namespace+'={\"extraValidations\": [], \"models\":{'+arr.join(',')+'}};';\n  \n  str += wrapExtraFiles(extraFiles, namespace);\n  str += wrapExtraFiles(Nohm.getExtraValidatorFileNames(), namespace); // needs to somehow access the same thing\n  str += fs.readFileSync(__dirname+'/validators.js', 'utf-8');\n  \n  if (uglify) {\n    try {\n      uglify = require('uglify-js');\n    } catch (e) {\n      Nohm.logError('You tried to use the uglify option in Nohm.connect but uglify-js is not requirable.');\n    }\n    if (uglify.parser && uglify.uglify) {\n      var jsp = uglify.parser;\n      var pro = uglify.uglify;\n      \n      var ast = jsp.parse(str);\n      // ast = pro.ast_mangle(ast); // TODO: test if this works with our globals\n      ast = pro.ast_squeeze(ast);\n      str = pro.gen_code(ast);\n    }\n  }\n  \n  return function (req, res, next) {\n    if (req.url === url) {\n      var headers = {\n          'Content-Type': 'text/javascript',\n          'Content-Length': str.length,\n          'Cache-Control': 'public, max-age=' + maxAge\n      };\n      res.writeHead(200, headers);\n      res.end(str);\n    } else {\n      next();\n    }\n  };\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":6640}]],"length":6640}
{"contributors":[],"silentsave":false,"ts":1390631714308,"patch":[[{"diffs":[[0,"    "],[-1,"var headers = {\n          '"],[1,"res.statusCode = 200;\n      res.setHeader(\""],[0,"Cont"]],"start1":6376,"start2":6376,"length1":35,"length2":51},{"diffs":[[0,"ent-Type"],[-1,"': '"],[1,"\", \""],[0,"text/jav"]],"start1":6427,"start2":6427,"length1":20,"length2":20},{"diffs":[[0,"ript"],[-1,"',"],[1,"\");"],[0,"\n      "],[-1,"    '"],[1,"res.setHeader(\""],[0,"Cont"]],"start1":6450,"start2":6450,"length1":22,"length2":33},{"diffs":[[0,"t-Length"],[-1,"':"],[1,"\","],[0," str.len"]],"start1":6485,"start2":6485,"length1":18,"length2":18},{"diffs":[[0,"ngth"],[-1,","],[1,");"],[0,"\n      "],[-1,"    '"],[1,"res.setHeader(\""],[0,"Cach"]],"start1":6502,"start2":6502,"length1":21,"length2":32},{"diffs":[[0,"trol"],[-1,"': '"],[1,"\", \""],[0,"publ"]],"start1":6539,"start2":6539,"length1":12,"length2":12},{"diffs":[[0,"max-age="],[-1,"'"],[1,"\""],[0," + maxAg"]],"start1":6555,"start2":6555,"length1":17,"length2":17},{"diffs":[[0,"xAge"],[-1,"\n      };\n      res.writeHead(200, headers"],[0,");\n "]],"start1":6569,"start2":6569,"length1":50,"length2":8}]],"length":6636,"saved":false}
